setwd("~/Documents/DataScienceDojo/bootcamp-master/Datasets")
ozone.data <- read.table("ozone.data")
head(ozone.data)
ozone.data <- read.table("ozone.data", header = TRUE)
head(ozone.data)
plot(x = ozone.data$wind, y = ozone.data$ozone)
plot(x = ozone.data$wind, y = ozone.data$ozone, type = ozone.data$temperature)
plot(x = ozone.data$wind, y = ozone.data$ozone)
install.packages("AzureML")
rm(list = ls())
setwd("~/RWorkSpace")
setwd("~/RWorkSpace")
?t.test
subjects <- c(1,2,3,4,5)
baseline <- c(140,138,150,148,135)
week_2 <- c(132,135,151,146,130)
exmaniation <- data.frame(subjects, baseline, week_2)
examiniation <- data.frame(subjects, baseline, week_2)
t.test(baseline ~ week_2, data = examiniation, alternative = "two.sided", paired=TRUE)
t.test(baseline ~ week_2, data = examiniation, paired=TRUE)
t.test(baseline ~ week_2, data = examiniation)
t.test(baseline ~ week_2, data = examiniation)
t.test(x = examiniation$subjects, y = examiniation$week_2, alternative = "two-sided", paired = TRUE)
t.test(x = examiniation$subjects, y = examiniation$week_2, alternative = "two.sided", paired = TRUE)
htest<- t.test(x = examiniation$subjects, y = examiniation$week_2, alternative = "two.sided", paired = TRUE)
htest$p.value
round(htest$p.value, digits = 3)
htest$conf.int
htest<- t.test(x = examiniation$baseline, y = examiniation$week_2, alternative = "two.sided", paired = TRUE)
p <- htest$p.value
htest$conf.int
p <- htest$p.value
p
round(p, 3)
htest$estimate
htest$conf.int
htest$estimate
ci <- mu + c(-1,1)*qt(p = q, df = n-1)*sd/sqrt(n)
n <- 9
mu <- 1100
sd <- 30
p = .95
q <-  p + (1-p)/2
c
ci <- mu + c(-1,1)*qt(p = q, df = n-1)*sd/sqrt(n)
?binom.test
binom.test(x = n_succ, n = n, p = p_succ, alternative = "greater")
n_succ <- 3
p_succ <- 3/4
n <- 4
binom.test(x = n_succ, n = n, p = p_succ, alternative = "greater")
htest <- binom.test(x = n_succ, n = n, p = p_succ, alternative = "greater")
htest$p.value
htest <- binom.test(x = n_succ, n = n, alternative = "greater")
htest$p.value
htest$null.value
htest$conf.int
poisson.test(x = events, T = timebase, r = rate, alternative = "less")
rate <- 1/100
events <- 1787
timebase <- 10
poisson.test(x = events, T = timebase, r = rate, alternative = "less")
rate <- 1/100
events <- 10
timebase <- 1787
htest <- poisson.test(x = events, T = timebase, r = rate, alternative = "less")
htest
n <- 18
n_tr <- 9
n_pl < 9
n_pl < 9
n_pl <- 9
avg_diff_tr <- -3
avg_diff_pl <- 1
sd_diff_tr <- 1.5
sd_diff_pl <- 1.8
avg_diff <- avg_diff_tr - avg_diff_pl
pooledvar <- ((n_tr - 1)*sd_diff_tr^2 + (n_pl - 1)*sd_diff_pl^2)/(n_tr + n_pl - 2)
sd_diff <- sqrt(pooledvar)
ci <- avg_diff + c(-1,1)*pt(q = 0.975, df = 16)*sd_diff*sqrt(1/n_tr + 1/n_pl)
pt(q = -3.35, df = 17)
pt(q = -3.35, df = 17)*2
pt(q = -3.35, df = 16)*2
pt(q = avg_diff/sd_diff, df = 16)*2
sd_diff <- sqrt(pooledvar/n_tr  + pooledvar/n_pl)
pt(q = avg_diff/sd_diff, df = 16)*2
pt(q = avg_diff/sd_diff, df = 16)*2
avg_diff/sd_diff
avg_diff
pooledvar <- (n_tr*sd_diff_tr^2 + n_pl*sd_diff_pl^2)/(n_tr + n_pl - 2)
sd_diff <- sqrt(pooledvar/n_tr  + pooledvar/n_pl)
pt(q = avg_diff/sd_diff, df = 16)*2
?power.t.test
power <- power.t.test(n = n, delta = mu, sd = 0.04, sig.level = p, alternative = "one.sided")
power$power
power <- power.t.test(n = n, delta = mu, sd = 0.04, sig.level = p, alternative = "one.sided", type = "one.sample")
power$power
power <- power.t.test(n = n, delta = mu, sd = sd, sig.level = p, alternative = "one.sided", type = "one.sample")
power$power
round(power$power, 2)
n <- 100 #subject
μ <- 0.01# m^3 brain volume loss mean
σ <- 0.04# m^3 brain volume loss std. dev.
p <- 0.05 # sign level
pow <- power.t.test(n=n, delta=μ, sd=σ , sig.level=p, type="one.sample", alt="one.sided")$power
round(pow, 2)
power <- power.t.test(n = n, delta = mu, sd = sd, sig.level = p, alternative = "one.sided", type = "one.sample")
n <- 100
mu <- 0.01
sd <- 0.04
p <- 0.05
power <- power.t.test(n = n, delta = mu, sd = sd, sig.level = p, alternative = "one.sided", type = "one.sample")
round(power$power, 2)
power <- power.t.test(power = pow, delta = mu, sd = sd, sig.level = alpha, alternative = "one.sided", type = "one.sample")
mu <- 0.01
sd <- 0.04
alpha <- 0.9
pow <- 0.05
power <- power.t.test(power = pow, delta = mu, sd = sd, sig.level = alpha, alternative = "one.sided", type = "one.sample")
power <- power.t.test(power = pow, delta = mu, sd = sd,  alternative = "one.sided", type = "one.sample")
sd <- 0.04
alpha <- 0.05
pow <- 0.9
power <- power.t.test(power = pow, delta = mu, sd = sd,  alternative = "one.sided", type = "one.sample")
power <- power.t.test(power = pow, delta = mu, sd = sd,  alternative = "one.sided", type = "one.sample", sig.level = alpha)
power$n
?ceiling
example("ceiling")
ceiling(power$n)
rm(list = ls())
library(caret)
install.packages("caret", dependencies=TRUE)
setwd("~/Documents/Udacity/DATA ANALYST Nano Degree/P3_Exploratory Data Analysis/quizes")
